#+SEQ_TODO: MAYBE SOMEDAY BLOCKED TODO WAITING | DONE

* Overview
  This snaplet provides create-read-update-delete operations for any
  JSON data with Redis storage.

** CRUD
   We implement generic CRUD for our forms using Redson snaplet, which
   is best explained by its routes (assuming they're installed in
   top-level snaplet under `/_` URL; prefix may be changed using
   nestSnaplet in parent initializer).

   All interactions with server use JSON as primary format, which is
   what Backbone uses by default for fetch(), save() and destroy()
   model methods, sending JSON with actual form contents to server,
   which maps them to Redis hashes stored under `<modelname>:<id>`
   key. Fresh id's are provided by using `global:<modelname>:<id>` key
   which is INCR-ed after every new form instance is created in
   database.
   
   No schema checking is performed by server, but permissions engine
   will disallow writing arbitary models and fields to server.

   CRUD mapping to HTTP methods is implemented in Redson as expected
   by Backbone:

   : CREATE → POST /<formid>
   : READ → GET /<formid>/<instanceid>/
   : UPDATE → PUT /<formid>/<instanceid>/
   : DELETE → DELETE /<formid>/<instanceid>/

*** Models

    Prior to reading and writing form data, the server reads form
    descriptions which from JSON files stored in directory set by
    `models-directory` setting (defaults to `resources/models/`). See
    [[https://github.com/dzhus/snap-metaforms][snap-metaforms]] for syntax description.

*** Permissions

    Permissions system is work in progress. Currently per-field
    permissions (set in canRead and canWrite field properties) are
    checked prior to writing any data to Redis or sending response to
    client. Implementation currently follows these rules:

    - No unreadable fields are sent to client on READ methods;
    - Attempt to perform any operation without being logged in results
      in 401 Unauthorized error.
    - Attempt to perform any operation on unknown model results in
      404 Not Found error;
    - Attempt to create or update instances with unwritable fields
      will be rejected with 403 Forbidden.

   Client may request stripped form description by sending this
   request:
   
   : GET /<formid>/model/

   Response will contain original description but without fields
   unreadable by current user. canEdit field property will be set to
   boolean value for every form field, indicating whether the current
   user can write to this field.
    
*** Server interface by example
    
    Assume we're using `scp.js` model given above.

**** CREATE
     
     Server request:

     : curl localhost:8000/_/scp/ -X POST -d "{\"title\":\"Able\", \"code\":\"076\", \"class\":\"Keter\"}"

     What server did in Redis:

     : incr global:scp:id
     
     (24 is returned)
     
     : hmset scp:24 code 076 title Able class Keter

     Server response:

     : {"code":"076","id":"24","title":"Able","class":"Keter"}

     (note the `id` field which is returned by server after Redis was
     updated with new form instance. Backbone stores new instance id
     upon receiving server response and uses it in further server
     requests for saving updated model instance)

**** READ

     Server request:

     : curl localhost:8000/_/scp/24/ -X GET

     Server response:

     : {"code":"076","title":"Able","class":"Keter"}

     Redis command used:

     : hgetall scp:24

**** UPDATE

     What is sent to server:

     : curl localhost:8000/_/scp/24/ -X PUT -d "{\"title\":\"Able\", \"code\":\"076-2\", \"class\":\"Keter\", \"description\":\"Really nasty thing\"}"

     Server response is 204 (success, No content) in case the instance
     previously existed and 404 if not.

     Note that the all model fields are sent to server (this may be
     improved for efficiency).

**** DELETE

     Server request:

     : curl localhost:8000/_/scp/24/ -X DELETE

     Redis deletes the key:

     : del scp:24

     Server response contains JSON of instance before deletion:

     : {"code":"076-2","title":"Able","description":"Really nasty thing","class":"Keter"}


*** Timeline

    There's an extra entity stored in Redis for every model called
    timeline, which is a list with id's of instances stored in DB
    (in order of creation).

    `/_/scp/timeline/` serves JSON list of last N (currently 10)
    timeline items for model "scp":

    : curl localhost:8000/_/scp/timeline/ -X GET
    : ["39","38","37","36","35","34","33","32","31","30"]

    If instance is removed from Redis, corresponding timeline entry is
    removed as well.

    Client front-end uses timeline to show links to fresh instances.

    canRead model permission is required to access model timeline.
     
*** WebSockets notifications

    `/_/<modelname>/events/` provides instance creation/deletion
    notifications through WebSockets interface. Events are transmitted
    to clients in JSON format with fields `event`, `model` and `id`,
    where `event` is either `create` or `delete`.

** Redis interface
   We use redis bindings provided by snaplet-redis package. Pool size
   numbers are yet to be tuned.

* To do
** BLOCKED Routing bug
   Snap fails to properly route requests to `/foo/bar/` if it's
   shadowed by `/foo/bar/:baz/` route even if `:baz` variable capture
   fails: https://github.com/snapframework/snap-core/issues/120

   Currently we have to use a workaround to correctly direct
   `/_/<formname>/` requests to emptyPage handler by checking `id`
   parameter value in read handler.
   
** TODO Configurable pool size

** TODO Access control
   - [X] Per-field permissions (r/w) for different user groups
     (roles);
   - [ ]  c/r/u/d permissions on models for roles.
** TODO WebSockets interface improvement
   - [X] `load-model.js` contains full URI to WebSockets entry point
     (currently hardcoded for `scp` model)
   - [ ] publish events only for respective model under
     `<model>/events` entry point (requires addressing extension for
     PubSub or multiple PubSubs)
   - [ ] possible use native Redis' publish/subscribe mechanism
     
